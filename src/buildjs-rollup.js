import path from "path";
import fs from "fs-extra";

export function buildClientJs(opts, onComplete) {

    var moduleMappings;

    moduleMappings = {
        build: opts.tempFolder
    };
    for (let k in opts.moduleMappings) {
        moduleMappings[k] = opts.moduleMappings[k];
    }
    console.log("Mapping modules");
    for (let k in moduleMappings) {
        console.log(k + " => " + moduleMappings[k]);
    }



    var rollup = require('rollup').rollup;
    var nodeResolve = require('rollup-plugin-node-resolve');
    var babel = require('rollup-plugin-babel');
    var uglify = require('rollup-plugin-uglify');
    var alias = require('./rollup-plugin-alias');
    var htmlmin = require('./rollup-plugin-htmlmin');
    var commonjs = require('./rollup-plugin-commonjs');

    var babelPlugins = [
        path.resolve(__dirname, "../node_modules/babel-plugin-transform-decorators-legacy")
    ];
    if (!opts.debugMode) {
        babelPlugins.push(path.resolve(__dirname, "../node_modules/babel-plugin-transform-remove-console"));
    }

    var statusReporter = require("browserify-build-status");
    fs.writeFileSync(opts.dest, statusReporter.getErrorScript("Build in progress", "Try again in a few seconds", null, null, ".chondric-viewport,[chondric-viewport]"));


    rollup({
        entry: opts.src,
        plugins: [
            alias(moduleMappings),
            nodeResolve({ jsnext: true }),
            commonjs(),
            htmlmin({
                extensions: ['.html'],
                "caseSensitive": false,
                "collapseBooleanAttributes": true,
                "collapseInlineTagWhitespace": false,
                "collapseWhitespace": true,
                "conservativeCollapse": false,
                "decodeEntities": true,
                "html5": true,
                "ignoreCustomFragments": [],
                "includeAutoGeneratedTags": false,
                "keepClosingSlash": false,
                "maxLineLength": 0,
                "minifyCSS": true,
                "minifyJS": true,
                "preserveLineBreaks": false,
                "preventAttributesEscaping": false,
                "processConditionalComments": true,
                "processScripts": [
                    "text/html"
                ],
                "removeAttributeQuotes": true,
                "removeComments": true,
                "removeEmptyAttributes": false,
                "removeEmptyElements": false,
                "removeOptionalTags": false,
                "removeRedundantAttributes": false,
                "removeScriptTypeAttributes": true,
                "removeStyleLinkTypeAttributes": true,
                "removeTagWhitespace": true,
                "sortAttributes": true,
                "sortClassName": true,
                "useShortDoctype": true
            }),

            babel({
                babelrc: false,
                plugins: babelPlugins,
                presets: [
                    path.resolve(__dirname, "../node_modules/babel-preset-es2015-rollup")
                ]
            })
            // uglify is getting parse errors, so disable for now
            //uglify({
            //    mangle: true,
            //    compress: true
            //})
        ]
    }).then(function(bundle) {
        console.log("got bundle");
        console.log("writing to " + opts.dest);
        try {
            bundle.write({
                moduleName: "bundle",
                format: 'iife',
                dest: opts.dest,
                sourceMap: opts.debugMode
            });
            onComplete();
        } catch (e) {
            onComplete(e);
        }
    }, function(err) {
        // build error
        console.log(err);
        fs.writeFileSync(opts.dest, statusReporter.getErrorScriptFromError(err, ".chondric-viewport,[chondric-viewport]"));
        if (onComplete) onComplete(err);
    });
}